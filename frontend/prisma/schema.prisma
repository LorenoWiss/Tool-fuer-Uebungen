// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String                 @id @default(cuid())
  name               String
  email              String                 @unique
  emailVerified      DateTime?
  image              String?
  password           String
  accounts           Account[]
  sessions           Session[]
  ownedOrganizations Organization[]         @relation("OwnedOrganizations")
  memberships        OrganizationMember[] @relation("UserMemberships")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  ownerId   String   @map("owner_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  owner     User                 @relation("OwnedOrganizations", fields: [ownerId], references: [id], onDelete: Cascade)
  members   OrganizationMember[] @relation("OrganizationMembers")
  levels    Level[]
  exercises Exercise[]

  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           String // e.g., "ADMIN", "MEMBER"
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  organization Organization @relation("OrganizationMembers", fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation("UserMemberships", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model Level {
  id             String    @id @default(cuid())
  name           String
  organizationId String
  parentId       String?   @map("parent_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parent       Level?       @relation("LevelHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Level[]      @relation("LevelHierarchy")

  @@map("levels")
}

enum ExerciseStatus {
  PLANNED
  ONGOING
  COMPLETED
}

model Exercise {
  id             String         @id @default(cuid())
  name           String
  description    String?
  status         ExerciseStatus @default(PLANNED)
  organizationId String
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("exercises")
}