// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://77ba593f84eeed584ddb8cb57702fb144178366a4dbeaf9858408c3f066c7d8e:sk_mIAudVlOoQ9Um4yNUn6uQ@db.prisma.io:5432/?sslmode=require"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]

  ownedOrganizations Organization[] @relation("Owner")
  organizations      OrganizationMember[]
}

model Organization {
  id      String    @id @default(cuid())
  name    String
  ownerId String
  owner   User      @relation("Owner", fields: [ownerId], references: [id])
  members OrganizationMember[]
  levels  Level[]
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           String       // e.g., "ADMIN", "MEMBER"
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
}

model Level {
  id             String    @id @default(cuid())
  name           String
  organizationId String
  parentId       String?   // For sub-levels
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parent         Level?    @relation("SubLevels", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subLevels      Level[]   @relation("SubLevels")
  exercises      Exercise[]
}

model Exercise {
  id          String       @id @default(cuid())
  name        String
  levelId     String
  status      String       // e.g., "PLANNED", "IN_PROGRESS", "COMPLETED"
  level       Level        @relation(fields: [levelId], references: [id], onDelete: Cascade)
  timeSteps   TimeStep[]
  participants ExerciseParticipant[]
}

model TimeStep {
  id          String   @id @default(cuid())
  description String
  time        String   // Using String for flexibility, can be "10:00" or "Phase 1"
  order       Int
  exerciseId  String
  exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model ExerciseParticipant {
  id         String   @id @default(cuid())
  name       String
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

// Models for Auth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}